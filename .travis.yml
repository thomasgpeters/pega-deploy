language: python
os: linux
dist: bionic
env:
  global:
    - HELM_URL=https://get.helm.sh
    - HELM_TGZ=helm-v3.2.4-linux-amd64.tar.gz
    - YAMLLINT_VERSION=1.15.0
    - TRAVIS_GO_VERSION=1.13.1
install:
  # Install Helm
  - wget -q ${HELM_URL}/${HELM_TGZ}
  - tar xzf ${HELM_TGZ}
  - PATH=`pwd`/linux-amd64/:$PATH
  # Install YamlLint
  - sudo pip install yamllint=="${YAMLLINT_VERSION}"
  - nvm install --lts
  - npm install -g --save remark-cli to-vfile remark-preset-lint-recommended remark-validate-links remark-lint-no-dead-urls remark-message-control remark-preset-lint-markdown-style-guide remark-lint
  # Install Go
  - eval "$(gimme 1.13.1)"
  - export  PATH=$PATH:/usr/local/go/bin
script:
  - yamllint -c .yamllint.yml -s $(find . -type f -name "Chart.yaml")
  - yamllint -c .yamllint.yml -s $(find . -type f -name "values*.yaml")
  - remark -i .remark_ignore -f -u validate-links .
  # Now load the helm dependencies
  - make dependencies
  # Run GO helm unit tests
  - mkdir $TRAVIS_BUILD_DIR/terratest/bin
  - export GOPATH=$TRAVIS_BUILD_DIR/terratest
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  - export PATH=$PATH:$TRAVIS_BUILD_DIR/terratest/bin
  - cd terratest/src/test
  - dep ensure
  # grep "FAIL" -A 8 - filter unnecessary logs from the final output but show failing tests
  #  ; test ${PIPESTATUS[0]} -eq 0 - check if go test was finished success. Without it pipe return exit code from last command.
  - go test test/pega | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0
  - go test test/addons | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0
  - go test test/backingservices | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0
  - cd $TRAVIS_BUILD_DIR
  - chmod 777 before_deploy.sh
before_deploy:
  - ./before_deploy.sh  
  - make examples
deploy:
  - provider: releases
    api_key:
      secure: >
        Dm1ketCoZkpBiYo3pJMKr6K0qyPhQeMc5MyaxdpP/h9WzkYyucA
        wKmo3tOOeNrqiNnsz/4uNttNgQ3zlxK8Vrm2iiAGDUYYhcMzKrJ
        yNP3Ww9LR6AWIL+EIfxCzTjwJ+Dj00qk6l6lNcXtU7NrC+mBcSl
        k8JdnVFqJ4whX1r0+GgqASV0k9b1n76crM0RC+UoxR26BeT5bhP
        0j6jymU/bBv19sCbi75stxFRxyyO6mAlR26Imz4gDfwbe8/YOIQ
        otyzDOOWs8dgBdXrZqDL3xA/31PvR07HVCW6O+3X8cYH1jzO0Nu
        5eZRFoJQL3LXPJ0Ts4xXRDIpW7dutl589LQ1/4HNRfUqtnYBQ7M
        29c5nUizWpB+PccSpk+sSfXu37bIaRcgidb552nH2F6R2kSVJb+
        q7Eic3R8kEyvE0mM5VgBU2f2/r7uZK/RyvbKNLbtvac1I/nni9t
        EbqK4SWTKEAF40mCnq6BkxtfE+eGnYrrZKCwzHZYfcYGJ9s3SAr
        QPvj9Xu2beaPIr4JH29s440CXqq3ajWuAVAbF9EBteBP9vd+4rY
        ABuvWOMvvERAyn3ABKS4xHges/U2SKQb0+clEQjgzrq+JlmWkkP
        kg9Xoeds8PwTBwYhEIHr9rZSaeYIMfhXomMRcaCmuD5mUVo5YmB
        BWjrCOpYhUr0x7cUlqHg=
    file:
      - pega-kubernetes-example.tar.gz
      - pega-openshift-example.tar.gz
      - pega-azure-aks-example.tar.gz
      - pega-aws-eks-example.tar.gz
      - pega-google-gke-example.tar.gz
      - pega-pivotal-pks-example.tar.gz
    skip_cleanup: true
    on:
      repo: $TRAVIS_REPO_SLUG
      tags: true
  - provider: pages
    github-token: $GITHUB_TOKEN
    api_key:
      secure: >
        Dm1ketCoZkpBiYo3pJMKr6K0qyPhQeMc5MyaxdpP/h9WzkYyucA
        wKmo3tOOeNrqiNnsz/4uNttNgQ3zlxK8Vrm2iiAGDUYYhcMzKrJ
        yNP3Ww9LR6AWIL+EIfxCzTjwJ+Dj00qk6l6lNcXtU7NrC+mBcSl
        k8JdnVFqJ4whX1r0+GgqASV0k9b1n76crM0RC+UoxR26BeT5bhP
        0j6jymU/bBv19sCbi75stxFRxyyO6mAlR26Imz4gDfwbe8/YOIQ
        otyzDOOWs8dgBdXrZqDL3xA/31PvR07HVCW6O+3X8cYH1jzO0Nu
        5eZRFoJQL3LXPJ0Ts4xXRDIpW7dutl589LQ1/4HNRfUqtnYBQ7M
        29c5nUizWpB+PccSpk+sSfXu37bIaRcgidb552nH2F6R2kSVJb+
        q7Eic3R8kEyvE0mM5VgBU2f2/r7uZK/RyvbKNLbtvac1I/nni9t
        EbqK4SWTKEAF40mCnq6BkxtfE+eGnYrrZKCwzHZYfcYGJ9s3SAr
        QPvj9Xu2beaPIr4JH29s440CXqq3ajWuAVAbF9EBteBP9vd+4rY
        ABuvWOMvvERAyn3ABKS4xHges/U2SKQb0+clEQjgzrq+JlmWkkP
        kg9Xoeds8PwTBwYhEIHr9rZSaeYIMfhXomMRcaCmuD5mUVo5YmB
        BWjrCOpYhUr0x7cUlqHg=
    file:
        - index.yaml
    skip_cleanup: true
    target_branch: gh-pages
    keep_history: true
    verbose: true
    on:
      all_branches: true
      repo: $TRAVIS_REPO_SLUG
      draft: true
